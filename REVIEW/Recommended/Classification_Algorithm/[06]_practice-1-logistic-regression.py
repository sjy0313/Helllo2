#!/usr/bin/env python
# coding: utf-8

# # [06] 분류 및 군집분석

# [분석스토리]  
# 병아리가 무럭무럭 자라고 있을 무렵, 병아리 감별사에게 암수 구별을 요청했습니다. 
# 하지만 병아리 감별사의 시급이 너무 높아 전체 병아리의 암수 구별을 맡길 순 없었고, 
# 제한된 예산 내에서 어렵사리 60마리만 암수를 구분할 수 있었습니다. 
# 나머지 병아리들의 암수는 직접 구별해 보려고 하는데 
# 과연 그 어렵다는 병아리의 암수를 구분해 낼 수 있을까요?

# ## 1. 병아리의 성별을 구분할 수 있을까? (로지스틱 회귀)

# ### 1-1. 로지스틱 회귀란?

# 로지스틱 회귀(Logistic Regression)는 
# 이름에 회귀가 들어가서 앞서 배운 선형 회귀와 비슷한 유형으로 인식할 수 있으나 전혀 다른 방법론입니다.
# 로지스틱 회귀는 독립변수(x)의 선형 결합을 이용해 사건의 발생 가능성(확률)을 예측하는 데 사용되는 기법입니다. 
# 종속변수(y)가 수치형인 아닌 이산형(0 또는 1)일 경우 사용하며 종속변수가 2개 이상의 범주를 갖는 경우에도 활용할 수 있습니다.
# 로지스틱 회귀의 결과는 사건이 일어날 확률(Y = 1)로 나타내기 때문에 다음과 같은 수식과 그래프로 모델이 표현될 수 있습니다.

# > $$ P(Y=1|x) = {1 \over {1+e^-(α+β_1x_1+β_2x_2+...+β_nx_n)}} $$

# <div>
# <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/88/Logistic-curve.svg/1920px-Logistic-curve.svg.png" width="500"/>
#     <center>로지스틱 함수(Sigmoid 함수) 그래프(출처 : wikipedia)</center>
# </div>

#%%

# 분류 알고리즘
#   - sklearn 패키지를 이용해 예측값을 생성할 경우 범주 형태(Class Labels)는 메소드를 이용
#   - 확률형태(Probability Estimates)는 prodiect_proba() 메소드를 이용

# 분류 알고리즘의 성능평가 방법
#   - 정오분류표(Confusion Martix): sklearn.metrics 모듈의 confusion_matrix() 함수 사용
#   - 기본적인 정확도 외에도 민감도(재현율)와 정밀도를 자동으로 계산하기 위해서는
#     classfication_report() 함수를 사용
#   - ROC 커브의 AUC: sklearn.metrics 모듈의 auc() 함수를 사용하며
#     AUC가 1에 가까울 수록 높은 성능을 가짐

# ROC 커브(Receiver Operation Characteristic Curve)
#   - 정오분류표를 통해 도출해 낼 수 있는 민간도를 y축으로, (1-특이도)를 x축으로 하는 커브
#   - 이 커브의 밑부분 면적을 AUC(Area Under the ROC Curve)라고 한다.
#   - AUC가 100%에 가가울수록 분류 모델의 성능이 뛰어나다고 볼 수 있다.

# 분류와 군집의 차이
#   - 분류(classfication)와 군집은 데이터를 그룹화한다는 개념에서는 유사
#   - 분류는 라벨링이 되어 있는 데이터를 활용한 지도학습 방법
#   - 군집은 라벨링이 되어 있지 않은 데이터를 활용하는 비지도학습 방법이라는 차이가 있음
#

#%%

# 분류 알고리즘과 성능 평가 방법
# 분류 알고리즘의 경우 일반적으로 정오분류표(Confusion Matrix)와 ROC 커브(Receiver Operation Characteristic Curve)의 
# 밑부분 넓이인 AUC(Area Under the ROC Curve)를 이용해 성능을 평가한다.

#%%

# 정오분류표(Confusion Matrix)

"""
                       +----------------------------+
                       |            실제값          |
                       +--------------+-------------+
                       |  Positvie(1) | Negative(0) |
+--------+-------------+--------------+-------------+---------------------------+
|        | Poistive(1) |      TP      |      FP     | 정밀도                    |
| 예측값 +-------------+--------------+-------------+---------------------------+
|        | Negative(0) |      FN      |      TN     | Negative Predictive Value |
+--------+-------------+--------------+-------------+---------------------------+
                       |    민감도    |    특이도   | 정확도                    |
                       +--------------+-------------+---------------------------+   
"""

#%%

# 정오분류표(Confusion Matrix)는 실제값과 예측값이 서로 얼마나 잘 맞는지 표로 나타낸 것
# 수치형 데이터와 달리 범주형 데이터의 경우 실제값과 예측값이 같은지 다른지를
# 진리값(True or False)으로 표현할 수 있기 때문에 이런 방법을 사용한다.
#   - 정확도(Accuracy) : (TP + TN) / TOTAL
#   - 오류율(Error Rate) : (FP + FN) / TOTAL
#   - 민감도(Sensitivity), 재현율(Recall): TP / (TP + FN)
#   - 특이도(Specificity) : TN / (FP + TN)
#   - 정밀도(Precision) : TP / (TP + FP)
#   - Negative Predictive Value : TN / (FN + TN)

# 예시:
#   - 민감도는 질병진단의 관점에서 질병이 있는 사람을 얼마나 잘 찾아내는지를 나타내는 지표
#     즉, 질병이 있는 사람에게 질병이 있다고 진단하는 비율을 의미
#
#   - 특이도는 질병이 없는 사람에게 질병이 없다고 진단하는 비율을 의미

#   - 췌장암의 경우 매우 심각한 질병으로 초기에 발견하지 못하면 대부분의 환자들이 목숨을 잃는다.
#     본인이 의사이고 환자의 영상 결과를 분석해 췌장암을 진단해야 한다고 가정해 보자
#     췌장암이라고 확실히 판독되는 경우도 있겠지만 다소 애매한 경우들이 있다.
#     이런 경우에는 아마도 환자에게 췌장암으로 의심이 된다고 진단한 뒤 추가 검사를 진행하는 편이 환자의 목숨을 살리는 데 유리하다.
#     즉, 조금이라도 췌장암이 의심이 된다면 췌장암이라고 진단해 실제보다 더 많이 진단하는 것이다.
#     이렇게 되면 결과적으로 민감도는 올라가고, 정확도는 떨어지게 된다.
#     이유는 췌장암에 걸리지 않은 사람에게도 췌장암이라고 진단하는 경우가 많아지기 때문이다.

# 당신이 의사라면 둘 중 어떤 의사에게 진단받고 싶은가?
"""    
+-----------------+------------------+
|                 |       실제       |
|    의사 A       +------------------+
|                 |  췌장암 |  정상  |
+-------+---------+---------+--------+
| 진단  |  췌장암 |     10  |    10  |
|(예측) +---------+---------+--------+
|       |  (정상) |      0  |   980  |
+-------+---------+---------+--------+--------+                   
|                 | 100.0%  | 99.0%  |  99.0% |
|                 +---------+--------+--------+                   
|                 | 민감도  | 특이도 | 정확도 |
+-----------------+---------+--------+--------+                   

+-----------------+------------------+
|                 |       실제       |
|    의사 B       +------------------+
|                 |  췌장암 |  정상  |
+-------+---------+---------+--------+
| 진단  |  췌장암 |      8  |     2  |
|(예측) +---------+---------+--------+
|       |  (정상) |      2  |   988  |
+-------+---------+---------+--------+--------+                   
|                 |  80.0%  | 99.8%  |  99.6% |
|                 +---------+--------+--------+                   
|                 | 민감도  | 특이도 | 정확도 |
+-----------------+---------+--------+--------+

의사A는 의사B 보다 췌장암 진단 정확도가 0.6% 낮다.
하지만 민감도는 100%로 췌장암에 걸린 모든 환자들을 정확히 진단했다.
물론, 10명 정도는 정상이었지만 췌장암이라고 오진하기도 했다.

의사B는 정상인들을 정상이라고 판단한 특이도가 의사A 보다 0.8% 더 높다.
하지만 췌장암에 걸린 환자 10명 중 2명을 정상이라고 오진했다.

이와 같은 경우라면 정확도가 낮더라도 본인의 목숨을 위해서 의사A에게 진단을 받을 것이다.

이렇게 잘못 진단(예측)해서 손실이 막대한 경우에는 정확도보다 민감도를 더 중요한 지표로 사용한다.

-------------------------------------------------------------------------------
★ 비대칭 데이터에서 정확도의 효용 ★ 
췌장암 사례와 같이 어떤 사건이 발생할 확률이 매우 낮아 데이터가 비대칭(Imbalanced) 상태일 경우에는
정확도라는 지표가 아주 쓸모가 없을 수도 있다.

예를 들어, 1,000명 중 1명이 범인이고, 999명이 일반인이라면
1,000명 전체를 일반인이라고 판정하게 되면 정확도는 99.9%가 된다.
이 경우 정확도의 효용은?
"""
    
#%%
# ### 1-2. 데이터 불러와서 확인하기

# In[1]:


import pandas as pd
g = pd.read_csv("dataset/ch6-1.csv")


# In[2]:


g.head()


# In[3]:


g.info()


# In[4]:


# gender 변수의 값 m을 1로, f를 0으로 변경
# m : 숫컷
# f : 암컷
g['gender'] = g['gender'].map({'m':1, 'f':0})
g.head()


# ### 1-3. 로지스틱 회귀

# In[5]:


# 로지스틱 회귀 구현을 위한 모듈 불러오기
import statsmodels.api as sm
# 모델 구축 및 학습
model_glm = sm.Logit.from_formula('gender ~ wing_length + tail_length', data = g).fit()


# In[6]:


model_glm.summary()

###############################################################################
# ### 1-4. 분류 알고리즘의 성능 평가방법
###############################################################################

# 분류 알고리즘의 경우 일반적으로 정오분류표(Confusion Matrix)와 
# ROC 커브(Receiver Operation Characteristic Curve)의 밑부분 넓이인 
# AUC(Area Under the ROC Curve)를 이용해 성능을 평가합니다.
# AUC가 100%에 가까울수록 분류 모델의 성능이 뛰어나다고 볼 수 있다.

# 참고 사이트: 
# https://en.wikipedia.org/wiki/Confusion_matrix
# https://www.datasciencecentral.com/

#%%
# ### 1-5. 로지스틱 회귀모델의 성능 평가

# In[7]:


# predict() 메서드를 이용해 예측값(확률) 생성
y_prob = model_glm.predict(g.iloc[:,0:2])


# In[8]:


# 예측값(확률) 확인
y_prob.head()

#%%

# 종속변수(y)의 확률값
"""
0    0.915579
1    0.988904
2    0.997049
3    0.985377
4    0.991588
dtype: float64
"""


# In[9]:


# 예측값 확률을 반올림을 통해 1과 0으로 표현 후 list 타입으로 변경
y_pred = list(map(round, y_prob))


# In[10]:


# 예측값(클래스) 확인
y_pred[0:5] # [1, 1, 1, 1, 1]


# In[11]:


# 기존값인 gender열을 별도 y로 저장
y = g['gender']


# In[12]:


# 정오분류표 함수 불러오기
from sklearn.metrics import confusion_matrix


# In[13]:


# 분류결과 평가, 1을 기준으로 
confusion_matrix(y, y_pred, labels = [1,0])


# In[14]:


# 분류리포트 함수 불러오기
from sklearn.metrics import classification_report


# In[15]:


print(classification_report(y, y_pred))

#%%

# accuracy(정확도)  : 95%
# recall(민감도)    : 1(93%), 0(94%)
# precision(정밀도) : 1(97%), 0(94%)
"""
              precision    recall  f1-score   support

           0       0.94      0.97      0.95        30
           1       0.97      0.93      0.95        30

    accuracy                           0.95        60
   macro avg       0.95      0.95      0.95        60
weighted avg       0.95      0.95      0.95        60
"""


# In[16]:


# ROC 커브를 그리기 위한 함수 불러오기
from sklearn.metrics import roc_curve


# In[17]:


# ROC 커브를 그리기 위한 변수 설정
fpr, tpr, thresholds = roc_curve(y, y_prob)


# In[18]:


# ROC 커브 그리기
import matplotlib.pyplot as plt
plt.figure(figsize=(10,7))
plt.plot(fpr,tpr)
plt.title('ROC Curve')
plt.xlabel('1-Specificity')
plt.ylabel('Sensitivity')
plt.show()

# 결과: ROC 커브가 좌측 상단에 꽉 찬 형태로 모델의 성능이 매우 뛰어난 것으로 보임

# In[19]:


# AUC 계산을 위한 함수 불러오기
from sklearn.metrics import auc


# In[20]:


# AUC 계산
auc(fpr, tpr) 

# 결과: 0.9866666666666667
# ROC 커브의 아래 면적인 AUC 값이 0.987로 1에 가까운 매우 높은 값이다.
# 병아리 암수 구분 로지스틱 회귀모델의 성능이 매우 뛰어나다고 평가할 수 있다.


#%%

# THE END